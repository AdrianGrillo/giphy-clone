{"version":3,"sources":["components/search-components/SearchResults.js"],"names":["api","activeStyle","background","GifSearchResults","query","location","pathname","split","useAxios","loading","error","gifs","data","className","map","gif","key","id","src","images","fixed_height","url","alt","StickerSearchResults","classname","SearchResults","type","link","index","to","toLowerCase","substr"],"mappings":"iHAAA,kGAOMA,EAAM,mCAENC,EAAc,CAChBC,WAAY,WAGhB,SAASC,EAAT,GAAyC,IAC/BC,EAD8B,EAAZC,SACDC,SAASC,MAAM,KAAK,GADP,EAGCC,YAAS,gDAAD,OACOR,EADP,cACgBI,EADhB,wCAAtCK,EAH6B,EAG7BA,QAASC,EAHoB,EAGpBA,MAAaC,EAHO,EAGbC,KAIvB,OAAGH,EACQ,kBAAC,IAAD,MAGRC,EACQ,wBAAIG,UAAU,SAAd,SAIP,yBAAKA,UAAU,iBACVF,EAAKC,KAAKE,KAAI,SAAAC,GACX,OACI,wBAAIC,IAAKD,EAAIE,IACT,yBAAKC,IAAKH,EAAII,OAAOC,aAAaC,IAAKC,IAAI,2BAYnE,SAASC,EAAT,GAA6C,IACnCnB,EADkC,EAAZC,SACLC,SAASC,MAAM,KAAK,GADH,EAGHC,YAAS,oDAAD,OACWR,EADX,cACoBI,EADpB,uCAAtCK,EAHiC,EAGjCA,QAASC,EAHwB,EAGxBA,MAAaC,EAHW,EAGjBC,KAIvB,OAAGH,EACQ,kBAAC,IAAD,MAGRC,EACQ,wBAAIG,UAAU,SAAd,SAIP,yBAAKA,UAAU,qCACVF,EAAKC,KAAKE,KAAI,SAAAC,GACX,OACI,wBAAIC,IAAKD,EAAIE,IACT,yBAAMO,UAAU,wBAAwBN,IAAKH,EAAII,OAAOC,aAAaC,IAAKC,IAAI,2BAYvF,SAASG,EAAT,GAAsC,IAAbpB,EAAY,EAAZA,SAE9BD,EAAQC,EAASC,SAASC,MAAM,KAAK,GAErCmB,EAAOrB,EAASC,SAASC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAIxD,OACI,oCACI,wBAAIM,UAAU,qBACV,4BACI,4BAAKT,IAET,4BAEI,kCAAiB,SAATsB,EAAkB,OAAS,cAI3C,yBAAKb,UAAU,0BAdN,CAAC,OAAQ,YAeJC,KAAI,SAACa,EAAMC,GACjB,OACI,kBAAC,IAAD,CACIZ,IAAKY,EACLC,GAAE,kBAAaF,EAAKG,cAAlB,YAAmC1B,GACrCS,UAAU,mBACVZ,YAAaA,GAEZ0B,OAOmB,SAAnCtB,EAASC,SAASyB,OAAO,EAAG,GACvB,kBAAC5B,EAAD,CAAkBE,SAAUA,IAC5B,kBAACkB,EAAD,CAAsBlB,SAAUA","file":"static/js/4.a732480d.chunk.js","sourcesContent":["import React from 'react'\nimport '../../scss/search-results.scss'\nimport useAxios from '../../hooks/useAxios'\nimport { NavLink } from 'react-router-dom'\nimport Loading from '../Loading'\nimport PropTypes from 'prop-types'\n\nconst api = 'D4NJn0Y2lqBrdx3rzoV7Fm15m0KBDRTI'\n\nconst activeStyle = {\n    background: '#39ba6d'\n}\n\nfunction GifSearchResults({ location }) {\n    const query = location.pathname.split('+')[1]\n\n    const {loading, error, data: gifs} = useAxios(\n        `https://api.giphy.com/v1/gifs/search?api_key=${api}&q=${query}&limit=48&offset=0&rating=g&lang=en`\n    )\n\n    if(loading) {\n        return <Loading />\n    }\n\n    if(error) {\n        return <h1 className='error'>Error</h1>\n    }\n\n    return (\n        <div className='gif-container'>\n            {gifs.data.map(gif => {\n                return (\n                    <li key={gif.id}>\n                        <img src={gif.images.fixed_height.url} alt='search result gif'></img>\n                    </li>\n                )\n            })}\n        </div>\n    )\n}\n\nGifSearchResults.propTypes = {\n    location: PropTypes.string.isRequired\n}\n\nfunction StickerSearchResults({ location }) {\n    const query = location.pathname.split('+')[1]\n\n    const {loading, error, data: gifs} = useAxios(\n        `https://api.giphy.com/v1/stickers/search?api_key=${api}&q=${query}&limit=48&offset=0&rating=g&lang=e`\n    )\n\n    if(loading) {\n        return <Loading />\n    }\n\n    if(error) {\n        return <h1 className='error'>Error</h1>\n    }\n\n    return (\n        <div className='gif-container stickers-background'>\n            {gifs.data.map(gif => {\n                return (\n                    <li key={gif.id}>\n                        <img  classname='search-result-sticker' src={gif.images.fixed_height.url} alt='search result gif'></img>\n                    </li>\n                )\n            })}\n        </div>\n    )\n}\n\nStickerSearchResults.propTypes = {\n    location: PropTypes.string.isRequired\n}\n\nexport default function SearchResults({ location }) {\n    // The search query is after the plus sign in our route so here we're splitting the route to get the search\n    const query = location.pathname.split('+')[1]\n    // The type of content the page is diaplying is after the '=' sign and before the '+' sign in the url\n    const type = location.pathname.split('=')[1].split('+')[0]\n\n    const navLinks = ['GIFs', 'Stickers']\n\n    return (\n        <>\n            <ul className='row search-header'>\n                <li>\n                    <h1>{query}</h1>\n                </li>\n                <li>\n                    {/* Tell the user what type of content we're displaying based on the url path */}\n                    <h5>48 {type === 'gifs' ? 'GIFs' : 'Stickers'}</h5>\n                </li>\n            </ul>\n\n            <div className='row selector-container'>\n                {navLinks.map((link, index) => {\n                    return (\n                        <NavLink\n                            key={index}\n                            to={`/search=${link.toLowerCase()}+${query}`}\n                            className='content-selector'\n                            activeStyle={activeStyle}\n                        >\n                            {link}\n                        </NavLink>\n                    )\n                })}\n            </div>\n\n            {/* If 'gifs is in our path then render the gifs component, if not, then render the stickers component */}\n            {location.pathname.substr(8, 4) === 'gifs'\n                ? <GifSearchResults location={location} />\n                : <StickerSearchResults location={location} />\n            }\n\n        </>\n    )\n}\n\nSearchResults.propTypes = {\n    location: PropTypes.string.isRequired\n}"],"sourceRoot":""}